# frozen_string_literal: true

class TelegramWebhooksController < Telegram::Bot::UpdatesController
  include Telegram::Bot::UpdatesController::MessageContext
  
  before_action :load_user # –ø–æ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å , only: [:example] –∏–ª–∏  except: [:example]
  # bin/rake telegram:bot:poller   –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

  # chat - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"id":377884669,"first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","type":"private"}

  # from - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"id":377884669,"is_bot":false,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","language_code":"ru","is_premium":true}

  # payload - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"message_id":335409,"from":{"id":377884669,"is_bot":false,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","language_code":"ru","is_premium":true},
  # "chat":{"id":377884669,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","type":"private"},
  # "date":1698134713,"text":"asd"}

  # session[:user]

  def start!(*)
    menu
  end

  def send_custom_message(message_text, chat_id)
    respond_with :message, text: message_text, chat_id: chat_id
  end

  def create_payment(data)
    pay_data = {
      amount: {
          value:    data[:cost],
          currency: 'RUB'
      },
      capture:      true,
      confirmation: {
          type:       'redirect',
          return_url: 'https://yookassa.ru/'
      },
      receipt: {
        customer: {
          email: "#{data[:email]}"
        },
        items: [
          {
            "description": "#{data[:description]}",
            "quantity": "1",
            "amount": {
              "value": "#{data[:cost]}",
              "currency": "RUB"
            },
            "vat_code": "1"
          }
        ]
      }
    }

    payment = Yookassa.payments.create(payment: pay_data)
    puts "=========== –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê ============="
    p payment.confirmation.confirmation_url
    p payment.confirmation
    p payment
    
    respond_with :message, text: "#{payment.confirmation.confirmation_url}"
  end

  def main_menu!
    p default_url_options[:locale]
    menu
  end

  def menu(value = nil, *)
    save_context :menu

    case value
    when '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
      choice_category
    when '–†–µ–∫–ª–∞–º–∞'
      marketing
      menu
    when '–ü–æ–º–æ—â—å'
      choice_help
      menu
    when '–ü–æ–∏–Ω—Ç—ã'
      points
    else
      respond_with :message, text: '–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞', reply_markup: {
        keyboard: [['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤', '–ü–æ–∏–Ω—Ç—ã üíé', '–ü–æ–º–æ—â—å ‚öôÔ∏è'], ['–†–µ–∫–ª–∞–º–∞ ‚ú®']],
        resize_keyboard: true,
        one_time_keyboard: true,
        selective: true
      }
    end
  end

  def points
    respond_with :message,
                 text: "#{from['first_name']}\n\n" \
                       "üîç –í–∞—à –±–∞–ª–∞–Ω—Å: #{@user.point} \n" \
                       "üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ: #{@user.bonus} \n\n" \
                       '(–î–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–∏–Ω—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)',
                 reply_markup: {
                   inline_keyboard: [[{ text: '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã',
                                        callback_data: '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã' }]]
                 }
  end

  def get_the_mail(*args)
    save_context :get_the_mail 
    if args.any?
      session[:email] = args.first
      case session[:email]
        when /^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$/
          get_the_mail_message = respond_with :message, 
                   text: "–í–∞—à–∞ –ø–æ—á—Ç–∞: #{args.first}",
                   reply_markup: {inline_keyboard: [[{ text: '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É', callback_data: '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É' }],
                                                    [{ text: '–í—Å–µ —á–µ—Ç–∫–æ‚úÖ', callback_data: '–í—Å–µ —á–µ—Ç–∫–æ' }]]}
          session[:get_the_mail_message_id] = get_the_mail_message['result']['message_id']
          session[:get_the_mail_chat_id] = get_the_mail_message['result']['chat']['id'] 
        else  
          respond_with :message,
                        text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
      end
                                                 
                                           
    elsif @user.email
      respond_with :message,
      text: "–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–∫—Ä—ã–≤–∞—à–µ–∫"
    else 
      respond_with :message,
      text: "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –≤ —ç—Ç–æ—Ç —á–∞—Ç"
    end
  end

  def choice_tarif
    bot.edit_message_text text: "–í–∞—à–∞ –ø–æ—á—Ç–∞: #{session[:email]}\n\n" \
                                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
                          message_id: session[:get_the_mail_message_id] ,
                          chat_id: session[:get_the_mail_chat_id],
                          reply_markup: {
                            inline_keyboard: [
                              [{ text: 'üíé 20 –ø–æ–∏–Ω—Ç–æ–≤ - 100‚ÇΩ', callback_data: '20 –ø–æ–∏–Ω—Ç–æ–≤' }],
                              [{ text: 'üíé 100 –ø–æ–∏–Ω—Ç–æ–≤ - 400‚ÇΩ', callback_data: '100 –ø–æ–∏–Ω—Ç–æ–≤' }]
                            ]
                          }      
    # RestClient.get 'https://api.telegram.org/bot5127742801:AAHNyXy90gXJlzOWNLF67O5CZjlYlM3Y-0g/–ù–ê–ó–í–ê–ù–ò–ï_–ú–ï–¢–û–î–ê', 
    #                 {params: {id: 50, 'foo' => 'bar'}}        
  end

  def choice_help
    respond_with :message, text: "üëâ‚ö°Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" \
                                 "1Ô∏è‚É£ –ù–∞–∂–º–∏ \"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤\" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚úÖ\n\n" \
                                 "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å üíº\n" \
                                 "üîπ –ü–æ–ª—É—á–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n" \
                                 "3Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ \"–ü–æ–∏–Ω—Ç—ã üíé\" –ø—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å\n" \
                                 "üîπ –ü–æ–∏–Ω—Ç—ã - –≤–∞–ª—é—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º ‚öúÔ∏è\n" \
                                 "üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏–Ω—Ç–∞\n\n" \
                                 '–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º? "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤" - –∏ –≤–ø–µ—Ä—ë–¥!'
  end

  def marketing
    text = ""
    Category.all.each_with_index do |category, index|
      text += "#{index+1}. #{category.name}: #{category.user.size}\n"
    end
    puts text
    respond_with :message, text: "(–ï—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" \
                                 "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:\n" + text                             
  end

  def choice_category
    category_send_message = respond_with :message,
                                         text: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n" \
                                               "(–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏)\n\n" \
                                               "üîã - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n" \
                                               "\u{1FAAB} - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –≤—ã–±—Ä–∞–Ω–∞",
                                         reply_markup: formation_of_category_buttons

    session[:category_message_id] = category_send_message['result']['message_id']
  end

  def callback_query(data)
    category = Category.find_by(name: data)
    checking_subscribed_category(category.id) if category

    case data
    # when 'alert'
    #   answer_callback_query 'data', show_alert: true
    when '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
      choice_category
    when '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã'
      get_the_mail
    when '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É'
      get_the_mail
    when '–í—Å–µ —á–µ—Ç–∫–æ'
      @user.update({:email => session[:email]})
      choice_tarif
    when /mid_\d+_bdid_\d+/
      data_scan = data.scan(/\d+/)
      open_a_vacancy({ :message_id => data_scan[0], :vacancy_id => data_scan[1] })
    when '20 –ø–æ–∏–Ω—Ç–æ–≤'
      create_payment({
        :cost => 10.00,
        :email => @user.email,
        :description => "20 –ø–æ–∏–Ω—Ç–æ–≤"
      })
    when '100 –ø–æ–∏–Ω—Ç–æ–≤'
      create_payment({
        :cost => 10.00,
        :email => @user.email,
        :description => "100 –ø–æ–∏–Ω—Ç–æ–≤"
      })
    end
  end

  def message(_message)
    menu
  end

  private

  def load_user
    @user = User.find_by_platform_id(payload['from']['id'])
    unless @user
      @user = User.new(user_params(payload))
      if @user.save
        p 'GOOD'
      else
        respond_with :message, text: '–í—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –±–¥'
      end
    end
    subscriptions = @user.subscriptions.includes(:category)
    @subscribed_categories = subscriptions.map(&:category)
  end

  def user_params(data)
    {
      username: data['from']['username'],
      platform_id: data['from']['id'],
      name: data['from']['first_name'],
      point: 0,
      bonus: 2
    }
  end

  def formation_of_category_buttons
    subscriptions = @user.subscriptions.includes(:category)
    @subscribed_categories = subscriptions.map(&:category)
    all_category = Category.all
    
    buttons = []
    couple_button = []
    all_category.each do | category |
      couple_button << {
        text: "#{category.name} #{@subscribed_categories.include?(category) ? 'üîã' : "\u{1FAAB}"}",
        callback_data: "#{category.name}"
      }

      if couple_button.size == 2 || category == all_category.last
        buttons << couple_button
        couple_button = []
      end
    end

    {inline_keyboard: buttons}
  end

  def edit_message_category
    bot.edit_message_text(text: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n" \
                                "(–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏)\n\n" \
                                "üîã - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n" \
                                "\u{1FAAB} - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –≤—ã–±—Ä–∞–Ω–∞",
                          message_id: session[:category_message_id],
                          chat_id: chat["id"],
                          reply_markup: formation_of_category_buttons)
  end

  def checking_subscribed_category(category_id)
    target_category = Category.find(category_id)

    if @subscribed_categories.include?(target_category)
      unsubscribe_user_from_category(target_category)
    else
      subscribe_user_to_category(target_category)
    end
    edit_message_category
  end

  def subscribe_user_to_category(category)
    @user.subscriptions.create(category: category)
  end

  def unsubscribe_user_from_category(category)
    @user.subscriptions.find_by(category: category)&.destroy
  end

  def open_a_vacancy(data)
    vacancy = Vacancy.find(data[:vacancy_id])
    text_formation = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: #{vacancy.category_title}\n\n" \
                     "#{vacancy.description}\n\n" \
                     "–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n" \
                     "#{vacancy.contact_information}"

    if @user.bonus > 0
      update_point_send_messag(text_formation, {:bonus => @user.bonus - 1}, data[:message_id])
    elsif @user.point > 0
      update_point_send_messag(text_formation, {:point => @user.point - 1}, data[:message_id])
    else
      answer_callback_query "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∏–Ω—Ç—ã \u{1FAAB}\n\n" \
                            "–ü–æ–∫—É–ø–∫–∞ –ø–æ–∏–Ω—Ç–æ–≤ - –≤—ã–≥–æ–¥–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ!" \
                            "üíé –ë–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç: #{@user.bonus}\n" \
                            "üíé –ü–ª–∞—Ç–Ω—ã–π —Å—á–µ—Ç: #{@user.point}\n", 
                            show_alert: true
    end
  end

  def update_point_send_messag(text, data, message_id)
    bot.edit_message_text(text: text,
                          message_id: message_id,
                          chat_id: chat["id"],
                          reply_markup: {})
    @user.update(data)
  end

  def default_url_options
    { locale: "http://www.example.com/" }
  end

  def session_key
    "#{bot.username}:#{from ? "from:#{from['id']}" : "chat:#{chat['id']}"}"
  end
end
