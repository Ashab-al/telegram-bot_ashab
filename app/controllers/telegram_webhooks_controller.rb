# frozen_string_literal: true
require_relative '../services/pagination_service'

class TelegramWebhooksController < Telegram::Bot::UpdatesController
  include Telegram::Bot::UpdatesController::MessageContext
  
  before_action :load_user, only: [:start!, :payment_verification, :create_payment, :points,
                                   :by_points, :choice_tarif, :callback_query, 
                                   :formation_of_category_buttons, :edit_message_category,
                                   :checking_subscribed_category, :subscribe_user_to_category,
                                   :unsubscribe_user_from_category, :open_a_vacancy,
                                   :update_point_send_messag, :menu, :my_chat_member, 
                                   :main_menu!, :send_vacancy_start, :send_vacancy_next] # –ø–æ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å , only: [:example] –∏–ª–∏  except: [:example]
  # bin/rake telegram:bot:poller   –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

  # chat - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"id":3778846691,"first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","type":"private"}

  # from - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"id":3778846691,"is_bot":false,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","language_code":"ru","is_premium":true}

  # payload - –≤—ã–¥–∞–µ—Ç —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  # {"message_id":335409,"from":{"id":3778846691,"is_bot":false,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","language_code":"ru","is_premium":true},
  # "chat":{"id":3778846691,
  # "first_name":"–ê—Å—Ö–∞–± –ê–ª—Ö–∞–∑—É—Ä–æ–≤ | –ß–∞—Ç-–±–æ—Ç—ã | Python | Ruby",
  # "username":"AshabAl","type":"private"},
  # "date":1698134713,"text":"asd"}

  # session[:user]

  def start!(*)
    begin
      choice_help
      menu
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "start err: #{e}")
    end
  end

  def update_bonus_users!
    begin
      respond_with :message,
                    text: "–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"

      users_to_update = User.where('bonus < ?', 2)
      respond_with :message,
                    text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à–ª–∏—Å—å: #{users_to_update.to_a.size}"
      users_to_update.update_all(bonus: 2)
      respond_with :message,
                    text: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ!\n\n" \
                          "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: #{User.all.size}"
    
    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "update_bonus_users err: #{e}")
    end
  end

  def payment_verification(data)
    begin 
      result_check_paid = Yookassa.payments.find(payment_id: data[:payment_id])
      if result_check_paid[:status] == "succeeded"
        @user.update({:point => @user.point + result_check_paid[:metadata][:quantity_points].to_i})
        answer_callback_query '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª! üîãüéâ', show_alert: true
        bot.edit_message_text text: "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª! üîãüéâ\n" \
                                    "–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ #{result_check_paid[:metadata][:quantity_points].to_i} –ø–æ–∏–Ω—Ç–æ–≤. üí≥\n\n",
                            message_id: data[:message_id],
                            chat_id: @user.platform_id  
        bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:\n\n" \
                                                    "–ö–ª–∏–µ–Ω—Ç: #{@user.name}\n" \
                                                    "–ü–æ–∏–Ω—Ç—ã: #{result_check_paid[:metadata][:quantity_points].to_i}")                     
        points              
      else
        respond_with :message,
                    text: "–ü–æ—Ö–æ–∂–µ, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. üòï \n\n" \
                          "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É –∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç. ‚è≥ –ò –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂\"\n\n" \
                          "–ï—Å–ª–∏ –≤—ã –ø–æ–¥–æ–∂–¥–∞–ª–∏ 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @AshabAl. üì¨"                 
      end

    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "payment_verification err: #{e}")
    end
  end

  def create_payment(data)
    begin 
      pay_data = {
        amount: {
            value:    data[:cost],
            currency: 'RUB'
        },
        capture:      true,
        confirmation: {
            type:       'redirect',
            return_url: 'https://t.me/infobizaa_bot'
        },
        receipt: {
          customer: {
            email: "#{data[:email]}"
          },
          items: [
            {
              "description": "#{data[:description]}",
              "quantity": "1",
              "amount": {
                "value": "#{data[:cost]}",
                "currency": "RUB"
              },
              "vat_code": "1"
            }
          ]
        },
        metadata: {
          platform_id: "#{@user.platform_id}",
          email: "#{@user.email}",
          quantity_points: "#{data[:quantity_points]}"
        }
      }
      payment = Yookassa.payments.create(payment: pay_data)

      result_send_message = respond_with :message,
                                          text: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂\" –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n" \
                                                "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. üåü \n\n" \
                                                "üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤: #{data[:quantity_points]}\n" \
                                                "üîã–°—Ç–æ–∏–º–æ—Å—Ç—å: #{data[:cost].to_i}‚ÇΩ\n\n" \
                                                "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - #{payment.confirmation.confirmation_url}",
                                          reply_markup: {
                                            inline_keyboard: [[{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data: "pay_id_#{payment.id}" }]]
                                          }
      session[:create_payment_message_id] = result_send_message['result']['message_id'] 

      bot.edit_message_text text: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂\" –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n" \
                                  "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. üåü \n\n" \
                                  "üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏–Ω—Ç–æ–≤: #{data[:quantity_points]}\n" \
                                  "üîã–°—Ç–æ–∏–º–æ—Å—Ç—å: #{data[:cost].to_i}‚ÇΩ\n\n" \
                                  "–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã - #{payment.confirmation.confirmation_url}",
                            message_id: result_send_message['result']['message_id'],
                            chat_id: @user.platform_id,
                            reply_markup: {
                              inline_keyboard: [
                                [{ text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂', 
                                  callback_data: "pay_id_#{payment.id}_mes_id_#{result_send_message['result']['message_id']}" }]
                              ]
                            } 
    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "create_payment err: #{e}")
    end
  end

  def main_menu!
    begin
      menu
    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "main_menu err: #{e}")
    end
  end

  def menu(value = nil, *)
    begin
      save_context :menu

      case value
      when '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'
        choice_category
      when '–†–µ–∫–ª–∞–º–∞'
        marketing
        menu
      when '–ü–æ–º–æ—â—å'
        choice_help
        menu
      when '–ü–æ–∏–Ω—Ç—ã'
        points
      else
        respond_with :message, text: total_vacancies_sent,
                                parse_mode: 'HTML'

        respond_with :message, text: '–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞', reply_markup: {
          keyboard: [['–ü–æ–∏–Ω—Ç—ã üíé', '–†–µ–∫–ª–∞–º–∞ ‚ú®', '–ü–æ–º–æ—â—å ‚öôÔ∏è'], ['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤']],
          resize_keyboard: true,
          one_time_keyboard: true,
          selective: true
        }
      end
    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "menu err: #{e}")
    end
  end

  def total_vacancies_sent
    vacancies_by_category = Vacancy.group(:category_title).count
    text = "<b>–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> #{Vacancy.count} ‚ö°Ô∏è\n"
    
    Category.all.each do |category|  
      category_vacancies_count = vacancies_by_category[category.name] || 0
      text += if category_vacancies_count.positive?
                "<b>#{category.name}:</b> #{category_vacancies_count}\n"
              else
                "#{category.name}: #{category_vacancies_count}\n"
              end
    end
    
    text 
  end

  def points
    begin
      points_message = respond_with :message,
                  text: "#{from['first_name']}\n\n" \
                        "üîç –í–∞—à –±–∞–ª–∞–Ω—Å: #{@user.point} \n" \
                        "üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ: #{@user.bonus} \n\n" \
                        '(–î–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –ø–æ–∏–Ω—Ç–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞)',
                  reply_markup: {
                    inline_keyboard: [[{ text: '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã',
                                          callback_data: '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã' }]]
                  }
      session[:by_points_message_id] = points_message['result']['message_id']
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "points err: #{e}")
    end
  end

  def get_the_mail(*args)
    begin
      if args.any?
        session[:email] = args.first
        case session[:email]
          when /^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$/
            get_the_mail_message = respond_with :message, 
                    text: "–í–∞—à–∞ –ø–æ—á—Ç–∞: #{args.first}",
                    reply_markup: {inline_keyboard: [[{ text: '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É', callback_data: '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É' }],
                                                      [{ text: '–í—Å–µ —á–µ—Ç–∫–æ‚úÖ', callback_data: '–í—Å–µ —á–µ—Ç–∫–æ' }]]}
            session[:by_points_message_id] = get_the_mail_message['result']['message_id']
            
          else  
            save_context :get_the_mail 
            respond_with :message, text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
        end
                                                                        
      else 
        save_context :get_the_mail 
        respond_with :message, text: "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –≤ —ç—Ç–æ—Ç —á–∞—Ç"
      end
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "get_the_mail err: #{e}")
    end
  end

  def by_points
    begin
      if @user.email
        choice_tarif
      else
        get_the_mail
      end
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "by_points err: #{e}")
    end
  end

  def choice_tarif
    begin 
      bot.edit_message_text text: "–í–∞—à–∞ –ø–æ—á—Ç–∞: #{@user.email}\n\n" \
                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
                            message_id: session[:by_points_message_id],
                            chat_id: @user.platform_id,
                            reply_markup: {
                              inline_keyboard: [
                                [{ text: 'üíé 10 –ø–æ–∏–Ω—Ç–æ–≤ - 60‚ÇΩ', callback_data: '10 –ø–æ–∏–Ω—Ç–æ–≤' }],
                                [{ text: 'üíé 30 –ø–æ–∏–Ω—Ç–æ–≤ - 171‚ÇΩ', callback_data: '30 –ø–æ–∏–Ω—Ç–æ–≤' }],
                                [{ text: 'üíé 50 –ø–æ–∏–Ω—Ç–æ–≤ - 270‚ÇΩ', callback_data: '50 –ø–æ–∏–Ω—Ç–æ–≤' }],
                                [{ text: 'üíé 100 –ø–æ–∏–Ω—Ç–æ–≤ - 510‚ÇΩ', callback_data: '100 –ø–æ–∏–Ω—Ç–æ–≤' }],
                                [{ text: 'üíé 150 –ø–æ–∏–Ω—Ç–æ–≤ - 720‚ÇΩ', callback_data: '150 –ø–æ–∏–Ω—Ç–æ–≤' }],
                                [{ text: 'üíé 200 –ø–æ–∏–Ω—Ç–æ–≤ - 900‚ÇΩ', callback_data: '200 –ø–æ–∏–Ω—Ç–æ–≤' }]
                              ]
                            }            
    rescue => e
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "choice_tarif err: #{e}")
    end
  end

  def choice_help
    begin
      respond_with :message, text: "üëâ‚ö°Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n" \
      "1Ô∏è‚É£ –ù–∞–∂–º–∏ \"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤\" –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚úÖ\n\n" \
      "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å üíº\n" \
      "üîπ –ü–æ–ª—É—á–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n\n" \
      "3Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ \"–ü–æ–∏–Ω—Ç—ã üíé\" –ø—Ä–æ–≤–µ—Ä—å –±–∞–ª–∞–Ω—Å\n" \
      "üîπ –ü–æ–∏–Ω—Ç—ã - –≤–∞–ª—é—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º ‚öúÔ∏è\n" \
      "üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏–Ω—Ç–∞\n\n" \
      '–ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º? "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ üß≤" - –∏ –≤–ø–µ—Ä—ë–¥!' 

    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "choice_help err: #{e}")
    end
  end

  def marketing
    begin
      text = ""
      Category.all.each_with_index do |category, index|
        text += "#{index+1}. #{category.name}: #{category.user.size}\n"
      end
      respond_with :message, text: "(–ï—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" \
                                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:\n" + text     
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "marketing err: #{e}")
    end
  end

  def choice_category
    begin
      category_send_message = respond_with :message,
                                          text: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n" \
                                                "(–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏)\n\n" \
                                                "üîã - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n" \
                                                "\u{1FAAB} - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –≤—ã–±—Ä–∞–Ω–∞",
                                          reply_markup: formation_of_category_buttons

      session[:category_message_id] = category_send_message['result']['message_id']
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "choice_category err: #{e}")
    end
  end
  

  def callback_query(data_callback)
    begin
      
      case data_callback
      when '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
        choice_category
        return true
      when '–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã'
        by_points
        return true
      when '–ü–æ–∏–Ω—Ç—ã'
        points
        return true
      when '–ü–æ–º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É'
        get_the_mail
        return true
      when '–í—Å–µ —á–µ—Ç–∫–æ'
        case session[:email]
        when /^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$/
          @user.update({:email => session[:email]})
          choice_tarif
        else
          get_the_mail
        end       
        return true
      when /^\d{1,3} –ø–æ–∏–Ω—Ç–æ–≤$/
        tarifs = {
          "10 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 60.00,
            :description => "10 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 10
          },
          "30 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 171.00,
            :description => "30 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 30
          },
          "50 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 270.00,
            :description => "50 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 50
          },
          "100 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 510.00,
            :description => "100 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 100
          },
          "150 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 720.00,
            :description => "150 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 150
          },
          "200 –ø–æ–∏–Ω—Ç–æ–≤": {
            :cost => 900.00,
            :description => "200 –ø–æ–∏–Ω—Ç–æ–≤",
            :quantity_points => 200
          }
        }
        create_payment({
          :cost => tarifs[:"#{data_callback}"][:cost],
          :email => @user.email,
          :description => tarifs[:"#{data_callback}"][:description],
          :quantity_points => tarifs[:"#{data_callback}"][:quantity_points]
        })
        return true
      when /^mid_\d+_bdid_\d+/
        data_scan = data_callback.scan(/\d+/)
        open_a_vacancy({ :message_id => data_scan[0], :vacancy_id => data_scan[1] })
        return true
      when /^spam_mid_\d+_bdid_\d+/
        data_scan = data_callback.scan(/\d+/)
        spam_vacancy({ :message_id => data_scan[0], :vacancy_id => data_scan[1] })
        return true
      when /pay_id_\S+/
        match_data = data_callback.scan(/pay_id_(\w+-\w+-\w+-\w+-\w+)_.*mes_id_(\d+)/)
        payment_verification({
          :payment_id => match_data[0][0],
          :message_id => match_data[0][1]
        })
        return true
      when "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"
        send_vacancy_start # –î–æ—Ä–∞–±–æ—Ç–∫–∞
        return true
      when "–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ 10"
        send_vacancy_next
        return true
      end

      category = Category.find_by(name: data_callback)
      checking_subscribed_category(category.id) if category

    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "callback_query err: #{e.inspect}")
    end
  end

  def send_vacancy_start
    subscribed_categories_name = @subscribed_categories.map(&:name)
    vacancy_list = Vacancy.where(
      category_title: subscribed_categories_name)
       .where.not(contact_information: Blacklist.where('complaint_counter > ?', 3).pluck(:contact_information))
       .where(created_at: 7.days.ago..Time.now
    )
    if subscribed_categories_name.empty? 
      answer_callback_query "üìú –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", 
                              show_alert: true
      return false
    elsif vacancy_list.empty?
      answer_callback_query "üìú –í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòû", 
                              show_alert: true
      return false
    end

    session[:vacancy_list_start_number] = 0
    paginationservice = PaginationService.new(@user, vacancy_list.reverse, session[:vacancy_list_start_number])

    session[:vacancy_list_start_number] = paginationservice.send_vacancy_pagination
  end

  def send_vacancy_next
    subscribed_categories_name = @subscribed_categories.map(&:name)
    vacancy_list = Vacancy.where(
      category_title: subscribed_categories_name)
       .where.not(contact_information: Blacklist.where('complaint_counter > ?', 3).pluck(:contact_information))
       .where(created_at: 7.days.ago..Time.now
    )
    if subscribed_categories_name.empty? 
      answer_callback_query "üìú –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞", 
                              show_alert: true
      return false
    elsif vacancy_list.empty?
      answer_callback_query "üìú –í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòû", 
                              show_alert: true
      return false
    elsif session[:vacancy_list_start_number].nil?
      choice_category
      return false
    end

    paginationservice = PaginationService.new(@user, vacancy_list.reverse, session[:vacancy_list_start_number])
    if session[:vacancy_list_start_number] >= vacancy_list.size 
      answer_callback_query "üìú –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! ‚úÖ", 
                                show_alert: true
    else
      session[:vacancy_list_start_number] = paginationservice.send_vacancy_pagination
    end
  end

  def message(_message)
    begin
      menu
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "message err: #{e}")
    end
  end

  def my_chat_member(data)
    begin
      @user.update({:bot_status => "bot_blocked"})
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "my_chat_member err: #{e}")
    end
  end

  private

  def load_user
    begin
      @user = User.find_by_platform_id(payload['from']['id'])
      unless @user
        @user = User.new(user_params(payload))
        if @user.save
          bot.send_message(chat_id: 377884669, 
          text: "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ\n\n" \
                "–ò–º—è: #{@user.name}\n" \
                "username: @#{@user.username}\n\n" \
                "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: #{User.all.size}\n" \
                "–í—Å–µ —É –∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å work: #{User.where(bot_status: "works").size}\n" \
                "–í—Å–µ —É –∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å bot_blocked: #{User.where(bot_status: "bot_blocked").size}"
          )
        else
          bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, 
          text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–¥ #{payload}")
        end
      end
      subscriptions = @user.subscriptions.includes(:category)
      @subscribed_categories = subscriptions.map(&:category)
      @user.update({:bot_status => "works"}) if @user.bot_status != "works"
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "load_user err: #{e}")
    end
  end

  def user_params(data)
    begin
      {
        username: data['from']['username'] || "",
        platform_id: data['from']['id'],
        name: data['from']['first_name'] || "",
        point: 0,
        bonus: 5
      }
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "user_params err: #{e}")
    end
  end

  def formation_of_category_buttons
    begin
      subscriptions = @user.subscriptions.includes(:category)
      @subscribed_categories = subscriptions.map(&:category)
      all_category = Category.all
      
      buttons = []
      couple_button = []
      all_category.each do | category |
        couple_button << {
          text: "#{category.name} #{@subscribed_categories.include?(category) ? 'üîã' : "\u{1FAAB}"}",
          callback_data: "#{category.name}"
        }

        if couple_button.size == 2 || category == all_category.last
          buttons << couple_button
          couple_button = []
        end
      end
      buttons << [{text: "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ üîç", callback_data: "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"}]
      {inline_keyboard: buttons}
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "formation_of_category_buttons err: #{e}")
    end
  end

  def edit_message_category
    begin
      bot.edit_message_text(text: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \n" \
                                  "(–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏)\n\n" \
                                  "üîã - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞\n" \
                                  "\u{1FAAB} - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–ï –≤—ã–±—Ä–∞–Ω–∞",
                            message_id: session[:category_message_id],
                            chat_id: @user.platform_id,
                            reply_markup: formation_of_category_buttons)

    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "edit_message_category err: #{e}")
    end
  end

  def checking_subscribed_category(category_id)
    begin
      target_category = Category.find(category_id)

      if @subscribed_categories.include?(target_category)
        unsubscribe_user_from_category(target_category)
        answer_callback_query "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∂–µ–ª–∞–µ–º–æ–≥–æ. üëΩ‚úÖ\n\n" \
                              "–í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å", show_alert: true
      else
        subscribe_user_to_category(target_category)
        answer_callback_query "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ. ü§ñ‚úÖ\n\n" \
                              "–°–∫–æ—Ä–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —ç—Ç–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é. üòâüì©", show_alert: true
      end
      edit_message_category
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "checking_subscribed_category err: #{e}")
    end
  end

  def subscribe_user_to_category(category)
    begin
      @user.subscriptions.create(category: category)
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "subscribe_user_to_category err: #{e}")
    end
  end

  def unsubscribe_user_from_category(category)
    begin
      @user.subscriptions.find_by(category: category)&.destroy
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "unsubscribe_user_from_category err: #{e}")
    end
  end

  def open_a_vacancy(data)
    begin
      vacancy = Vacancy.find(data[:vacancy_id])
      contact_information = vacancy.source == "tg_chat" ? vacancy.platform_id : vacancy.contact_information
  
      blacklist = Blacklist.find_by(:contact_information => contact_information)
      if blacklist and blacklist.complaint_counter >= 3
        answer_callback_query "–≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. üö´üòï", show_alert: true
        return true
      end
      button = [
        [{ text: "–ö—É–ø–∏—Ç—å –ø–æ–∏–Ω—Ç—ã #{@user.point <= 5 ? "ü™´" : "üîã"}", callback_data: "–ü–æ–∏–Ω—Ç—ã" }],
        [{ text: "ü§ñ –°–ø–∞–º ü§ñ", callback_data: "spam_mid_#{data[:message_id]}_bdid_#{data[:vacancy_id]}" }]
      ]
      text_formation = "<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> #{vacancy.category_title}\n" \
                      "<b>–í—Å–µ–≥–æ –ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞ —Å—á–µ—Ç—É:</b> #{@user.point + @user.bonus - 1}\n\n" \
                      "#{vacancy.description}\n\n" \
                      "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n" \
                      "#{vacancy.contact_information}"
                      
      if @user.bonus > 0
        update_point_send_messag(text_formation, {:bonus => @user.bonus - 1}, data[:message_id], button)
      elsif @user.point > 0
        update_point_send_messag(text_formation, {:point => @user.point - 1}, data[:message_id], button)
      else
        answer_callback_query "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–∏–Ω—Ç—ã \u{1FAAB}\n\n" \
                              "–ü–æ–∫—É–ø–∫–∞ –ø–æ–∏–Ω—Ç–æ–≤ - –≤—ã–≥–æ–¥–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ!" \
                              "üíé –ë–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç: #{@user.bonus}\n" \
                              "üíé –ü–ª–∞—Ç–Ω—ã–π —Å—á–µ—Ç: #{@user.point}\n", 
                              show_alert: true
      end
    rescue => e 
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "open_a_vacancy err: #{e}")
    end
  end

  def spam_vacancy(data)
    vacancy = Vacancy.find(data[:vacancy_id])
    contact_information = vacancy.source == "tg_chat" ? vacancy.platform_id : vacancy.contact_information
  
    blacklist = Blacklist.find_or_create_by(contact_information: contact_information) do |blacklist|
      blacklist.complaint_counter = 0
    end
  
    if blacklist.complaint_counter >= 3
      answer_callback_query "–≠—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–∞—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫. üö´üòï", show_alert: true
    else
      answer_callback_query "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. üöÄ‚úÖ", show_alert: true
      blacklist.increment!(:complaint_counter)
    end
  end

  def update_point_send_messag(text, data, message_id, button)
    begin
      bot.edit_message_text(text: text,
                            message_id: message_id,
                            chat_id: @user.platform_id,
                            parse_mode: 'HTML',
                            reply_markup: {inline_keyboard: button})
      @user.update(data)
    rescue => e 
      answer_callback_query "–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", show_alert: true
      respond_with :message,
                  text: text,
                  parse_mode: 'HTML',
                  reply_markup: {inline_keyboard: button}
                  
      @user.update(data)            
      bot.send_message(chat_id: Rails.application.secrets.errors_chat_id, text: "update_point_send_messag –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ err: #{e}")
    end
  end

  def session_key
    "#{bot.username}:#{from ? "from:#{from['id']}" : "chat:#{chat['id']}"}"
  end
end
